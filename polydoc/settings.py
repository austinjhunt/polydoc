"""
Django settings for polydoc project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
import json 
import logging 
import redis 
import boto3
from botocore.client import Config
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

if os.path.exists(f'{BASE_DIR}/.env'):
    load_dotenv()  # take environment variables from .env.

# Code of your application, which uses environment variables (e.g. from `os.environ` or
# `os.getenv`) as if they came from the actual environment.

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-sd$tg!cxostzu^rn=nvha7-n5(k845tuvgsi@g4ao!+q9po311'

DEBUG = not ('PRODUCTION' in os.environ)
ADMINS = [('Austin Hunt', 'austin353@gmail.com'), ('Joshua Dunn', 'JoshuaDunnCS@gmail.com')]

ALLOWED_HOSTS = [
    "poly-doc.herokuapp.com",
    "polydoc.xyz",
    "localhost"
]
CSRF_TRUSTED_ORIGINS = [
    'https://polydoc.xyz',
    'https://poly-doc.herokuapp.com',
]

INTERNAL_IPS = [
    "127.0.0.1",
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': 'polydoc.log',
            'formatter': 'verbose'
        },
        'stream': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'django': {
            'handlers':['stream'],
            'propagate': True,
            'level':'INFO',
        },
        'PolyDoc': {
            'handlers': ['stream'],
            'level': 'INFO',
        },
        'Models': {
            'handlers': ['stream'],
            'level': 'INFO',
        },
        'FileUtility': {
            'handlers': ['stream'],
            'level': 'INFO',
        },
        'S3Utility': {
            'handlers': ['stream'],
            'level': 'INFO',
        },
        'DriveAPI': {
            'handlers': ['stream'],
            'propagate': False, 
            'level': 'DEBUG'
        },
        'Celery': {
            'handlers': ['stream'],
            'propagate': False, 
            'level': 'DEBUG'
        }
    }
}

logger = logging.getLogger('PolyDoc')



# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles','django_browser_reload',
    'app',
    'compressor',
    # reverting to synchronous processing for now 
    # 'celery_progress',
    # 'celery',
    # 'django_celery_results',
    'storages'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_browser_reload.middleware.BrowserReloadMiddleware',
    # Simplified static file serving.
    # https://warehouse.python.org/project/whitenoise/
    'whitenoise.middleware.WhiteNoiseMiddleware',

]

ROOT_URLCONF = 'polydoc.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context.theme_context'
            ],
        },
    },
]

WSGI_APPLICATION = 'polydoc.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

try:

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.0/howto/static-files/

    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    # Simplified static file serving.
    # https://warehouse.python.org/project/whitenoise/
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    COMPRESS_ENABLED = True
    COMPRESS_ROOT = STATIC_ROOT
    COMPRESS_OFFLINE = True
    COMPRESS_OUTPUT_DIR = 'staticfiles'
    COMPRESS_CSS_FILTERS = ["compressor.filters.cssmin.CSSMinFilter"]

    # Testing
    TEST_ROOT = f'{BASE_DIR}/app/tests'

    STATICFILES_FINDERS = (
        'django.contrib.staticfiles.finders.FileSystemFinder',
        'django.contrib.staticfiles.finders.AppDirectoriesFinder',
        # other finders..
        'compressor.finders.CompressorFinder',
    )


    #### BEGIN CELERY SETTINGS ####
    # Reverting to synchronous processing for now 
    # BROKER_URL = os.environ.get('REDIS_URL', None)
    # CELERY_RESULT_BACKEND = 'django-db'
    # CELERY_ACCEPT_CONTENT = ['application/json']
    # CELERY_TASK_SERIALIZER = 'json'
    # CELERY_RESULT_SERIALIZER = 'json'
    # CELERY_TIMEZONE = 'US/Eastern'
    #### END CELERY SETTINGS ####

    ### REDIS SETTINGS ###
    # REDIS_URL = os.environ.get('REDIS_URL','')
    # REDIS = redis.StrictRedis.from_url(REDIS_URL)
    ###

    if not DEBUG: # production
         ## BEGIN S3 SETTINGS ##
        AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID', None)
        AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY', None)
        AWS_STORAGE_BUCKET_NAME = os.environ.get('S3_BUCKET_NAME', None)
        AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
        AWS_S3_REGION_NAME = 'us-east-1'
        AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
        AWS_S3_SIGNATURE_VERSION = 's3v4'
        S3_CLIENT = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_S3_REGION_NAME,
            config=Config(signature_version=AWS_S3_SIGNATURE_VERSION)
            )
        DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
        ## END S3 SETTINGS ###

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
    GOOGLE_DRIVE_FOLDER = os.path.join(MEDIA_ROOT, 'drive') if DEBUG else 'media/drive'
    if DEBUG:
        # use file in dev
        json_file = os.path.join(BASE_DIR, 'drive', 'credentials.json')
        with open(json_file) as f:
            GOOGLE_CREDENTIALS_JSON = dict(json.load(f))
    else:
        # use env in prod  
        GOOGLE_CREDENTIALS_JSON = dict(json.loads(os.environ.get('GOOGLE_CREDENTIALS_JSON', '{}')))
    GOOGLE_DRIVE_AUTHENTICATE_REDIRECT_URI = 'http://localhost:8000/drive/authenticate' if DEBUG else 'https://polydoc.xyz/drive/authenticate'
    GOOGLE_DRIVE_AUTHORIZATION_RESPONSE_URI = 'http://localhost:8000/dash' if DEBUG else 'https://polydoc.xyz/dash'
    # Only use heroku configuration if application currently running on heroku
    if 'APPLICATION_ON_HEROKU' in os.environ:
        # Configure Django App for Heroku.
        import django_heroku
        # pass logging=False to prevent heroku from overriding logging config above
        django_heroku.settings(locals(), logging=False)
        logger.info('using heroku settings')

except Exception as e:
    logger.error(e)

def get_cache():
  try:
    servers = os.environ['MEMCACHIER_SERVERS']
    username = os.environ['MEMCACHIER_USERNAME']
    password = os.environ['MEMCACHIER_PASSWORD']
    return {
      'default': {
        'BACKEND': 'django.core.cache.backends.memcached.PyLibMCCache',
        # TIMEOUT is not the connection timeout! It's the default expiration
        # timeout that should be applied to keys! Setting it to `None`
        # disables expiration.
        'TIMEOUT': 302400,
        'LOCATION': servers,
        'OPTIONS': {
          'binary': True,
          'username': username,
          'password': password,
          'behaviors': {
            # Enable faster IO
            'no_block': True,
            'tcp_nodelay': True,
            # Keep connection alive
            'tcp_keepalive': True,
            # Timeout settings
            'connect_timeout': 2000, # ms
            'send_timeout': 750 * 1000, # us
            'receive_timeout': 750 * 1000, # us
            '_poll_timeout': 2000, # ms
            # Better failover
            'ketama': True,
            'remove_failed': 1,
            'retry_timeout': 2,
            'dead_timeout': 30,
          }
        }
      }
    }
  except:
    return {
      'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache'
      }
    }

CACHES = get_cache()